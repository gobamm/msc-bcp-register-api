name: Build & Deploy bcp-register-api

on:
  workflow_dispatch:
  #push:
  #  branches: [ "develop" ]

  pull_request:
    branches: ["release", "develop"]
     
  release:
     types: [published] # Trigger on tag-based pull request to main branch


permissions:
   id-token: write
   contents: read
   actions: read

jobs:

  linter:
    if: vars.LINT_ENABLED == 'true'
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Check Event Scope
      run: |
        echo "Triggered by tag: $GITHUB_REF_NAME"
        echo "Tag Ref Name: $GITHUB_REF"
        echo "Event Name: $GITHUB_EVENT_NAME"
        echo "Base Ref: ${{ github.base_ref }}"

    - name: Run Linter
      uses: super-linter/super-linter@v7.2.0
      env:
        VALIDATE_PYTHON_MYPY: false
        VALIDATE_PYTHON: true
        FILTER_REGEX_INCLUDE: .*\.(py)$
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CREATE_LOG_FILE: true
        USER: ${{ github.actor }}
        LOG_LEVEL: ERROR
        LOG_FILE: ./super-linter.log  # Specify the log file location        
      continue-on-error: true
      
    - name: Upload Linter Results
      uses: actions/upload-artifact@v4
      with:
        name: linter-results
        path: ./super-linter.log
    
  unit-test:
    if: vars.UNITTEST_ENABLED == 'true'
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Run Unit Tests
      run: |
        pip install pytest pytest-cov 
        pytest --cov=src tests/
      continue-on-error: true

  sonar-scan:
    if: vars.SONAR_ENABLED == 'true'
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - uses: sonarsource/sonarqube-scan-action@v4
      env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
    - uses: sonarsource/sonarqube-quality-gate-action@v1
      timeout-minutes: 5
      env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
  build-and-push-image:
    needs: ["linter","unit-test","sonar-scan"]
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    # Determine TAG Variable
    - name: Determine TAG
      id: tag
      run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "TAG=${{ github.ref_name }}"
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            if [[ "${{ github.base_ref }}" == "release" ]]; then
              echo "TAG=uat-latest"
              echo "tag=uat-latest" >> $GITHUB_OUTPUT
            else
              echo "TAG=dev-latest"
              echo "tag=dev-latest" >> $GITHUB_OUTPUT            
            fi
          fi


    - name: Build the Docker image
      run: |  
        cd src 
        docker build . --file Dockerfile --tag ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}
        docker tag ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }} ghcr.io/${{ github.repository }}:latest

    # Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
       registry: ghcr.io
       username: ${{ github.actor }}
       #password: ${{ secrets.GHCR_TOKEN }}
       #password: ${{ secrets.GITHUB_TOKEN }}
       password: ${{ secrets.ORG_GITHUB_TOKEN }}

   # Push the Docker image
    - name: Push Docker image
      run: |
        docker push ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}
        docker push ghcr.io/${{ github.repository }}:latest


                   
  

  deploy-dev:
   #if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    needs: build-and-push-image
    runs-on: self-hosted
    environment: Develop

    steps:

    - uses: actions/checkout@v4

    # Install Azure CLI
    - name: Install Azure CLI
      run: |
         curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # Install Kustomize
    - name: Install Kustomize
      uses: imranismail/setup-kustomize@v2.1.0

    #Install kubectl
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v4.0.0

    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Use kubelogin to configure your kubeconfig for Azure auth
    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
       kubelogin-version: 'v0.0.25'

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.RESOURCE_GROUP }}
        cluster-name: ${{ vars.CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'
    
    - name: Update Kustomization with Image Tag
      run: |
          kustomize edit set image ghcr.io/${{ github.repository }}:${{ needs.build-and-push-image.outputs.tag }}
      working-directory: ${{ vars.KUSTOMIZE_PATH }}

    # Runs Kustomize to create manifest files
    - name: Bake deployment
      uses: azure/k8s-bake@v3
      with:
        renderEngine: "kustomize"
        kustomizationPath: ${{ vars.KUSTOMIZE_PATH }}
        kubectl-version: latest
      id: bake
    
    # Deploys application based on manifest files from previous step
    - name: Deploy application
      uses: Azure/k8s-deploy@v4
      with:
        action: deploy
        namespace: bcp-register
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
  

  deploy-uat:
    if: github.event_name == 'pull_request' && github.base_ref == 'release'
    needs: build-and-push-image
    runs-on: self-hosted
    environment: UAT

    steps:
    - uses: actions/checkout@v4

    # Install Azure CLI
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # Install Kustomize
    - name: Install Kustomize
      uses: imranismail/setup-kustomize@v2.1.0

    #Install kubectl
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v4.0.0

    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v2
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}
      continue-on-error: true

    # Use kubelogin to configure your kubeconfig for Azure auth
    - name: Set up kubelogin for non-interactive login
      uses: azure/use-kubelogin@v1
      with:
       kubelogin-version: 'v0.0.25'
      continue-on-error: true

    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.RESOURCE_GROUP }}
        cluster-name: ${{ vars.CLUSTER_NAME }}
        admin: 'false'
        use-kubelogin: 'true'
      continue-on-error: true


    - name: Update Kustomization with Image Tag
      run: |
          kustomize edit set image ghcr.io/${{ github.repository }}:${{ needs.build-and-push-image.outputs.tag }}
      working-directory: ${{ vars.KUSTOMIZE_PATH }}

    # Runs Kustomize to create manifest files
    - name: Bake deployment
      uses: azure/k8s-bake@v3
      with:
        renderEngine: "kustomize"
        kustomizationPath: ${{ vars.KUSTOMIZE_PATH }}
        kubectl-version: latest
      id: bake
      continue-on-error: true

    # Deploys application based on manifest files from previous step
    - name: Deploy application
      uses: Azure/k8s-deploy@v4
      with:
        action: deploy
        namespace: bcp-register
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
      continue-on-error: true

  deploy-prod:
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
        runs-on: self-hosted
        needs: build-and-push-image
        environment: Production
    
        steps:
          - uses: actions/checkout@v4
        
          # Install Azure CLI
          - name: Install Azure CLI
            run: |
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          # Install Kustomize
          - name: Install Kustomize
            uses: imranismail/setup-kustomize@v2.1.0

          #Install kubectl
          - name: Kubectl tool installer
            uses: Azure/setup-kubectl@v4.0.0

          # Logs in with your Azure credentials
          - name: Azure login
            uses: azure/login@v2
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}
    
          # Use kubelogin to configure your kubeconfig for Azure auth
          - name: Set up kubelogin for non-interactive login
            uses: azure/use-kubelogin@v1
            with:
              kubelogin-version: 'v0.0.25'
    
          # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
          - name: Get K8s context
            uses: azure/aks-set-context@v3
            with:
              resource-group: ${{ vars.RESOURCE_GROUP }}
              cluster-name: ${{ vars.CLUSTER_NAME }}
              admin: 'false'
              use-kubelogin: 'true'
    
    
          - name: Update Kustomization with Image Tag
            run: |
              kustomize edit set image ghcr.io/${{ github.repository }}:${{ needs.build-and-push-image.outputs.tag }}
              working-directory: ${{ vars.KUSTOMIZE_PATH }}
    
          # Runs Kustomize to create manifest files
          - name: Bake deployment
            uses: azure/k8s-bake@v3
            with:
              renderEngine: "kustomize"
              kustomizationPath: ${{ vars.KUSTOMIZE_PATH }}
              kubectl-version: latest
            id: bake
    
          # Deploys application based on manifest files from previous step
          - name: Deploy application
            uses: Azure/k8s-deploy@v4
            with:
              action: deploy
              namespace: bcp-register
              manifests: ${{ steps.bake.outputs.manifestsBundle }}
    

  api-test-dev:
    needs: deploy-dev
    runs-on: self-hosted
    environment: Develop

    steps:
      - name: Run API Tests in DEV
        run: |
          newman run postman_collection.json --environment postman_dev.json --reporters cli
        continue-on-error: true
  
  zap-test-dev:
     needs: deploy-dev
     runs-on: self-hosted
     environment: Develop
     
     steps:
      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: ${{ vars.TARGET_URL }}
          artifact_name: zap-report.html
        continue-on-error: true
      
      - name: Notify Team of DAST Results
        if: failure()
        run: echo "Send email or Microsoft Teams notification for DAST failure."

  api-test-uat:
    needs: deploy-uat
    runs-on: self-hosted
    environment: UAT

    steps:
      - name: Run API Tests in UAT
        run: |
          newman run postman_collection.json --environment postman_uat.json --reporters cli
        continue-on-error: true

  zap-test-uat:
    needs: deploy-uat
    runs-on: self-hosted
    environment: UAT

    steps:

      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: ${{ vars.TARGET_URL }}
          artifact_name: zap-report.html
        continue-on-error: true
      
      - name: Notify Team of DAST Results
        if: failure()
        run: echo "Send email or Microsoft Teams notification for DAST failure."

  api-test-prod:
    needs: deploy-prod
    runs-on: self-hosted
    environment: Production
        
    steps:
      - name: Run API Tests in UAT
        run: |
          newman run postman_collection.json --environment postman_uat.json --reporters cli
        continue-on-error: true

  zap-test-prod:
    needs: deploy-prod
    runs-on: self-hosted
    environment: Production
        
    steps:
        
      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: ${{ vars.TARGET_URL }}
          artifact_name: zap-report.html
        continue-on-error: true
              
      - name: Notify Team of DAST Results
        if: failure()
        run: echo "Send email or Microsoft Teams notification for DAST failure."

  performance-test-uat:
    needs: ["api-test-uat","zap-test-uat"]
    runs-on: self-hosted
    environment: UAT

    steps:
      - name: Install Apache JMeter
        run: |
          curl -LO https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xzf apache-jmeter-5.6.3.tgz
          echo "export JMETER_HOME=$PWD/apache-jmeter-5.6.3" >> $GITHUB_ENV
          echo "export PATH=$JMETER_HOME/bin:$PATH" >> $GITHUB_ENV

      # Step 3: Run JMeter Test Plan
      - name: Run JMeter Test Plan
        run: |
          mkdir -p results
          jmeter -n -t tests/test-plan.jmx -l results/test-results.jtl

      # Step 4: Upload JMeter Test Results
      - name: Upload JMeter Test Results
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-test-results
          path: results/test-results.jtl

      # Step 5: (Optional) Generate and Upload HTML Report
      - name: Generate HTML Report
        run: |
          jmeter -g results/test-results.jtl -o results/html-report

      - name: Upload JMeter HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-html-report
          path: results/html-report
        
